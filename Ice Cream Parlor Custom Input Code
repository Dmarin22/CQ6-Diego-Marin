import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    static int[] best_trio = new int[3];
    static int closest_sum = 0;
    static int[] cost;

    public static void findClosestThreeRecursive(int i, int j, int k, int m) {
        if (k >= cost.length) return;

        int current_sum = cost[i] + cost[j] + cost[k];
        if (current_sum <= m && current_sum > closest_sum) {
            closest_sum = current_sum;
            best_trio[0] = i + 1;
            best_trio[1] = j + 1;
            best_trio[2] = k + 1;
        }

        if (k < cost.length - 1) {
            findClosestThreeRecursive(i, j, k + 1, m);
        } else if (j < cost.length - 2) {
            findClosestThreeRecursive(i, j + 1, j + 2, m);
        } else if (i < cost.length - 3) {
            findClosestThreeRecursive(i + 1, i + 2, i + 3, m);
        }
    }

    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
        cost = arr.stream().mapToInt(Integer::intValue).toArray();
        findClosestThreeRecursive(0, 1, 2, m);
        return Arrays.stream(best_trio).boxed().collect(Collectors.toList());
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
